{"version":3,"sources":["componentes/Error.js","componentes/Buscador.js","componentes/Imagen.js","componentes/ListaImagenes.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Buscador","guardarBusqueda","useState","terminoBusqueda","guardarTerminoBusqueda","error","guardarError","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListaImagenes","imagenes","map","key","id","App","busqueda","guardarImagenes","paginaActual","guardarPaginaActual","totalPaginas","guardarTotalPaginas","useEffect","a","imagenPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","block","consultarApi","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50362fc1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Error = ({mensaje}) => (\n    <p className=\"my-3 p-4 text-center text-white alert alert-danger\">{mensaje}</p>\n);\n\nexport default Error;","import React, {useState} from 'react';\nimport Error from './Error';\n\nfunction Buscador({guardarBusqueda}){\n\n    const [terminoBusqueda, guardarTerminoBusqueda] = useState('');\n    const [error, guardarError] = useState(false);\n\n    const buscarImagen = e => {\n        e.preventDefault();\n\n        // validar\n        if(terminoBusqueda === ''){\n            guardarError(true);\n            return;\n        }\n\n        // enviar el termino hacia el componente principal\n        guardarError(false);\n        guardarBusqueda(terminoBusqueda);\n    }\n\n    return(\n        <form\n            onSubmit={buscarImagen}\n        >\n            <div className=\"row\">\n                <div className=\"form-group col-md-8\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Busca una imagen, ejemplo: Futbol o Café\"\n                        onChange={e => guardarTerminoBusqueda(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-lg btn-danger btn-block\"\n                        value=\"Buscar\"\n                    />\n                </div>\n            </div>\n\n            {(error) ? <Error mensaje=\"Agregar un término de búsqueda\" /> : null}\n\n        </form>\n    )\n}\n\nexport default Buscador;","import React from 'react';\n\nconst Imagen = ({imagen}) => {\n\n    const {largeImageURL, likes, previewURL, tags, views} = imagen;\n\n    return(\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\" />\n\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{likes} Me gusta</p>\n                    <p className=\"card-text\">{views} Vistas</p>\n                </div>\n\n                <div className=\"card-footer\">\n                    <a href={largeImageURL} rel=\"noopener noreferrer\" target=\"_blank\" className=\"btn btn-primary btn-block\">Ver Imagen</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Imagen;","import React from 'react';\nimport Imagen from './Imagen';\n\nfunction ListaImagenes({imagenes}){\n    return(\n        <div className=\"col-12 p-5 row\">\n            {imagenes.map(imagen => (\n                <Imagen \n                    key={imagen.id}\n                    imagen={imagen}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default ListaImagenes;","import React, {useState, useEffect} from 'react';\nimport Buscador from './componentes/Buscador';\nimport ListaImagenes from './componentes/ListaImagenes';\n// import { maxHeaderSize } from 'http';\n\nfunction App() {\n\n  const [busqueda, guardarBusqueda] = useState('');\n  const [imagenes, guardarImagenes] = useState([]);\n  const [paginaActual, guardarPaginaActual] = useState(1);\n  const [totalPaginas, guardarTotalPaginas] = useState(1);\n\n  useEffect(\n    () => {\n\n      if(busqueda === '') return;\n\n      const consultarApi = async() => {\n        const imagenPorPagina = 30;\n        const key = '14177916-66af66e98521d86875d3383e2';\n\n        const url = `https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenPorPagina}&page=${paginaActual}`;\n\n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n\n        guardarImagenes(resultado.hits);\n\n        // calcular el total de paginas\n        const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenPorPagina);\n        guardarTotalPaginas(calcularTotalPaginas);\n\n        // mover la pantalla hacia la parte superior\n        const jumbotron = document.querySelector('.jumbotron');\n        jumbotron.scrollIntoView({behavior: 'smooth', block: 'end'});\n      }\n      consultarApi();\n    }, [busqueda, paginaActual]\n  )\n\n  const paginaAnterior = () => {\n    let nuevaPaginaActual = paginaActual - 1;\n\n    // colocarlo en el state\n    guardarPaginaActual(nuevaPaginaActual);\n  }\n\n  const paginasSiguiente = () => {\n    let nuevaPaginaActual = paginaActual + 1;\n\n    // colocarlo en el state\n    guardarPaginaActual(nuevaPaginaActual);\n  }\n\n  return (\n    <div className=\"App container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">Buscador de Imágenes</p>\n\n        <Buscador \n          guardarBusqueda={guardarBusqueda}\n        />\n      </div>\n\n      <div className=\"row justify-content-center\">\n        <ListaImagenes \n          imagenes={imagenes}\n        />\n\n        {(paginaActual === 1) ? null : (\n          <button onClick={paginaAnterior} type=\"button\" className=\"btn btn-info mr-1\">&laquo; Anterior</button>\n        )}\n\n        {(paginaActual === totalPaginas) ? null : (\n          <button onClick={paginasSiguiente} type=\"button\" className=\"btn btn-info\">Siguiente &raquo;</button>\n        )}   \n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}